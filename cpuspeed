#!/usr/bin/env python
# -*- coding: utf-8 -*-


__license__ = """
CPUSpeed (C)left 2008-2016, Heiko 'riot' Weinen <riot@c-base.org>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

And don't you point any lawyers at me!
Send me a postcard, if you like this software.
"""

import gtk
import gobject
import click


class CPUSpeed:
    def destroy(self, widget, data=None):
        """
        Closes down the application

        :param widget:
        :param data:
        :return:
        """
        gobject.source_remove(self.reader)
        gtk.main_quit()

    def __init__(self, count, base_frequency, max_frequency, medium_high, medium_low, low, refresh, no_labels):
        """
        Sets up the window, configuration and events.

        """
        self.maximum = max_frequency * base_frequency
        self.medium_high = medium_high * base_frequency
        self.medium_low = medium_low * base_frequency
        self.minimum = low * base_frequency
        self.cpu_count = count
        self.refresh_interval = refresh
        self.no_labels = no_labels

        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        self.reader = gobject.timeout_add(self.refresh_interval, self.read)

        #        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)

        self.window.set_border_width(2)
        self.window.set_opacity(0.25)

        table_height = 1 if self.no_labels else 2
        label_space = 0 if self.no_labels else 1
        self.cpu_table = gtk.Table(table_height, self.cpu_count + label_space, True)
        self.window.add(self.cpu_table)


        if not self.no_labels:
            self.speed_frequency = gtk.Label("N/A")
            self.speed_label = gtk.Label("AVG")
            self.cpu_table.attach(self.speed_frequency, 0, 1, 0, 1)
            self.cpu_table.attach(self.speed_label, 0, 1, 1, 2)

        self.minimal_frequency = 9999
        self.maximal_frequency = 0000

        self.cpu_labels = []
        self.event_boxes = []

        for cpu_number in range(self.cpu_count):
            cpu_freq = gtk.Label(" ")
            event_box = gtk.EventBox()
            event_box.add(cpu_freq)

            if not self.no_labels:
                cpu_label = gtk.Label("%i" % cpu_number)
                self.cpu_table.attach(cpu_label, cpu_number + label_space, cpu_number + 2, 1, 2)
                self.cpu_labels.append(cpu_freq)
                cpu_label.show()
            
            self.cpu_table.attach(event_box, cpu_number + label_space, cpu_number + 2, 0, 1)
            self.event_boxes.append(event_box)
            event_box.show()
            cpu_freq.show()

        if not self.no_labels:
            self.speed_frequency.show()
            self.speed_label.show()
        self.cpu_table.show()
        self.window.show()

    def read(self):
        """
        Reads out the kernel frequency scaler current value table,
        colorizes the bars and displays the frequencies accordingly.
        """
        speed = 0

        for cpu_number in range(self.cpu_count):
            cpu_name = "/sys/devices/system/cpu/cpu%i/cpufreq" \
                      "/scaling_cur_freq" % cpu_number
            cpu_file = open(cpu_name)
            clock = int(cpu_file.read().rstrip("\n")) / 1000
            self.minimal_frequency = min(self.minimum, clock)
            self.maximal_frequency = max(self.maximum, clock)

            if not self.no_labels:
                self.cpu_labels[cpu_number].set_text(str(clock))
            if clock <= self.minimum:
                color = gtk.gdk.Color(0, 65535, 0)
            elif (clock > self.minimum) and (clock < self.medium_low):
                color = gtk.gdk.Color(32768, 65535, 0)
            elif (clock > self.medium_low) and (clock < self.medium_high):
                color = gtk.gdk.Color(65535, 65535, 0)
            elif (clock > self.medium_high) and (clock < self.maximum):
                color = gtk.gdk.Color(65535, 32768, 0)
            else:
                color = gtk.gdk.Color(65535, 0, 0)

            self.event_boxes[cpu_number].modify_bg(gtk.STATE_NORMAL, color)
            speed += clock

        speed = speed / self.cpu_count

        if not self.no_labels:
            self.speed_frequency.set_text("%i\n%i\n%i" % (speed, self.minimal_frequency, self.maximal_frequency))
        return True

    def main(self):
        """
        Runs the GTK main loop
        """
        gtk.main()


@click.command()
@click.option("--count", "-c", help="Specifiy number of cores to "
                                          "inspect (12)",
                    default=12, type=int)
@click.option("--base-frequency", "-b", help="Base frequency (1000)",
                    default=1000, type=int)
@click.option("--max-frequency", "-m", help="Maximum frequency multiplier "
                                        "red (4.5)",
                    default=4.5, type=float)
@click.option("--medium-high", "-mh",
                    help="Medium high frequency multiplier orange (3)",
                    default=3,
                    type=float)
@click.option("--medium-low", "-ml",
                    help="Medium low frequency multiplier yellow (2)",
                    default=2.9,
                    type=float)
@click.option("--low", "-l",
                    help="Lowest frequency multiplier green (0.8)",
                    default=1.8, type=float)
@click.option("--refresh", "-r", help="Refresh interval [ms] (1000)",
                    default=1000, type=int)
@click.option("--no-labels", "-n", default=False, type=bool)
def cpuspeed(**args):
    """CPU Speed display - GTK based"""

    cpuspeed_component = CPUSpeed(**args)
    cpuspeed_component.main()


if __name__ == "__main__":
    cpuspeed()
